name: Test & Build

on:
  schedule:
    - cron: "00 10 * * 1"
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Images
        uses: actions/cache@v2
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Build Images
        run: |
          docker-compose -f docker/docker-compose.yml build antivirus-function
          docker-compose -f docker/docker-compose.yml build antivirus-update-function
          mkdir -p /tmp/images
          docker save -o /tmp/images/antivirus-function.tar antivirus-function:latest
          docker save -o /tmp/images/antivirus-update-function.tar antivirus-update-function:latest

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.17.7'
      - uses: unfor19/install-aws-cli-action@v1

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install modules
        run: |
          go mod download

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v1.0.0
        with:
          gotestsum_version: 1.6.4

      - run: mkdir -p test-results

      - name: Run Unit Tests
        run: |
          gotestsum --junitfile test-results/unit-tests.xml -- ./... -coverprofile=test-results/test-coverage.txt

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v1
        with:
          files: test-results/test-coverage.txt
          fail_ci_if_error: true
          verbose: true

  code-test:
    name: Code Quality Tests
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Run linting
        uses: golangci/golangci-lint-action@v2

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: results.sarif

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  acceptance-test:
    name: Acceptance Test
    runs-on: ubuntu-latest
    needs:
      - build
      - unit-test
    steps:
      - uses: actions/checkout@v2
      - name: Cache Images
        uses: actions/cache@v2
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}
      - name: Restore images
        run: |
          docker load -i /tmp/images/antivirus-function.tar
      - name: Run Acceptance Tests
        run: bash ./test.sh

  push:
    name: "Build & Push Containers"
    runs-on: ubuntu-latest
    needs: ['build', 'unit-test', 'code-test', 'acceptance-test']
    if: github.actor != 'dependabot[bot]'
    outputs:
      branch: ${{ steps.set-outputs.outputs.branch }}
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "$GITHUB_EVENT_NAME" == "push" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=${{ github.head_ref }} >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@v1

      - name: Cache Images
        uses: actions/cache@v2
        with:
          path: /tmp/images
          key: ${{ runner.os }}-images-${{ github.run_id }}-${{ github.run_number }}

      - name: Restore Image
        run: |
          docker load -i /tmp/images/antivirus-function.tar
          docker load -i /tmp/images/antivirus-update-function.tar
      - name: Trivy Image Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: antivirus-function:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.61.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: minor
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: 311462405659

      - name: Push Function Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: s3-antivirus
        run: |
          docker tag antivirus-function:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag antivirus-function:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            # We want all of the tags pushed
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          fi

      - name: Push Update Function Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: s3-antivirus-update
        run: |
          docker tag antivirus-update-function:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag antivirus-update-function:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            # We want all of the tags pushed
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          fi

  push-tags:
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-s3-antivirus-production-tag" --type "String" --value "${{ needs.push.outputs.tag }}" --overwrite --region=eu-west-1
